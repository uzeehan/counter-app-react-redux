{"version":3,"sources":["components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","increment","props","dispatch","type","decrement","resetCount","className","name","onClick","this","count","Component","connect","state","initialState","store","createStore","action","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAGMA,E,4MAgBFC,UAAY,WACR,EAAKC,MAAMC,SAAS,CAChBC,KAAM,e,EAIdC,UAAY,WACR,EAAKH,MAAMC,SAAS,CAChBC,KAAM,e,EAIdE,WAAa,WACT,EAAKJ,MAAMC,SAAS,CAChBC,KAAM,W,uDAKV,OACI,yBAAKG,UAAU,kBACX,2CAGA,+CAEA,iCACI,4BACI,4BAAI,4BAAQC,KAAK,UAAUC,QAASC,KAAKL,WAArC,MACJ,4BACI,2BAAIK,KAAKR,MAAMS,QAEnB,4BAAI,4BAAQH,KAAK,UAAUC,QAASC,KAAKT,WAArC,QAGZ,yBAAKM,UAAU,eACX,4BAAQC,KAAK,gBAAgBD,UAAU,kBAAkBE,QAASC,KAAKJ,YAAvE,uB,GApDEM,aA+DPC,eAJS,SAACC,GAAD,MAAY,CAChCH,MAAOG,EAAMH,SAGFE,CAAyBb,G,OC5DlCe,G,MAAe,CACnBJ,MAAO,IAsBT,IAAMK,EAASC,aAnBf,WAAiD,IAA/BH,EAA8B,uDAAtBC,EAAcG,EAAQ,uCAC9C,OAAOA,EAAOd,MACZ,IAAK,YACH,MAAO,CACLO,MAAOG,EAAMH,MAAQ,GAEzB,IAAK,YACH,MAAO,CACLA,MAAOG,EAAMH,MAAQ,GAEzB,IAAK,QACH,MAAO,CACLA,MAAO,GAEX,QACE,OAAOG,MAwBEK,MAVf,WACE,OACE,kBAAC,IAAD,CAAUH,MAAOA,GACf,yBAAKT,UAAU,OACb,kBAAC,EAAD,SC/BYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9f59e8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Counter extends Component {\r\n\r\n    // increment = () => {\r\n    //     this.setState({\r\n    //         count: this.state.count + 1\r\n    //     })\r\n    //     console.log('+');\r\n    // }\r\n\r\n    // decrement = () => {\r\n    //     this.setState({\r\n    //         count: this.state.count - 1\r\n    //     })\r\n    //     console.log('-');\r\n    // }\r\n\r\n    increment = () => {\r\n        this.props.dispatch({\r\n            type: \"INCREMENT\"\r\n        })\r\n    }\r\n\r\n    decrement = () => {\r\n        this.props.dispatch({\r\n            type: \"DECREMENT\"\r\n        })\r\n    }\r\n\r\n    resetCount = () => {\r\n        this.props.dispatch({\r\n            type: \"RESET\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"page-container\">\r\n                <h1>\r\n                   Counter App \r\n                </h1>\r\n                <em>React and Redux</em>\r\n                \r\n                <section>\r\n                    <ul>\r\n                        <li><button name=\"plusBtn\" onClick={this.decrement}>-</button></li>\r\n                        <li>\r\n                            <p>{this.props.count}</p>\r\n                        </li>\r\n                        <li><button name=\"plusBtn\" onClick={this.increment}>+</button></li>\r\n                    </ul>\r\n                </section>\r\n                <div className=\"btn-wrapper\">\r\n                    <button name=\"resetCountBtn\" className=\"reset-count-btn\" onClick={this.resetCount}>Reset Counter</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    count: state.count\r\n});\r\n\r\nexport default connect(mapStateToProps)(Counter);\r\n","import React from 'react';\nimport Counter  from './components/Counter';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './App.scss';\n\nconst initialState = {\n  count: 0\n};\n\nfunction reducer (state = initialState, action) {\n  switch(action.type) {\n    case \"INCREMENT\": \n      return {\n        count: state.count + 1\n      }\n    case \"DECREMENT\": \n      return {\n        count: state.count - 1\n      }\n    case \"RESET\":\n      return {\n        count: 0\n      }\n    default:\n      return state;\n  }\n}\n  \nconst store =  createStore(reducer);\n\n// store.dispatch({\n//   type: \"INCREMENT\",\n// });\n\n// store.dispatch({\n//   type: \"DECREMENT\"\n// })\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Counter />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}